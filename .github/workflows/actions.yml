name: Build, Test, and Release

on:
  push:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: Infisical/secrets-action@v1.0.7
        with:
          client-id: ${{ secrets.INFISICAL_CLIENT_ID }}
          client-secret: ${{ secrets.INFISICAL_SECRET }}
          env-slug: "prod"
          project-slug: "learning-repo-tx-xr"
          domain: "https://eu.infisical.com"

      - name: Install Infisical CLI
        run: npm install -g @infisical/cli

      - name: Decode and Save Google Service Account JSON
        run: |
          echo "$GOOGLE_SERVICE_ACCOUNT_JSON_2" > keys.json

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' # install the python version needed    

      - name: Compile Code
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: |
          make deps
          make test
          
  release:
    name: Release
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: Infisical/secrets-action@v1.0.7
        with:
          client-id: ${{ secrets.INFISICAL_CLIENT_ID }} 
          client-secret: ${{ secrets.INFISICAL_SECRET }} 
          env-slug: "prod"
          project-slug: "learning-repo-tx-xr"
          domain: "https://eu.infisical.com"

      - name: Install Infisical CLI
        run: npm install -g infisical

      - name: Decode and Save Google Service Account JSON
        run: |
          echo "$GOOGLE_SERVICE_ACCOUNT_JSON_2" > keys.json
    
      - name: Build Docker Image
        run: docker build -t my-app:${{ github.sha }} -f apartment_hunt/Dockerfile .

      - name: Run Container in Detached Mode
        run: docker run -d --name my-running-app my-app:${{ github.sha }}

      - name: Wait for Container to Start
        run: sleep 10  # Wait a few seconds to allow the app to start (adjust based on startup time)

      - name: Check Logs for Errors
        run: docker logs my-running-app
      
      - name: Stop and Remove Container
        run: docker stop my-running-app && docker rm my-running-app

      - name: Generate PR version
        id: version
        run: echo "new_version=PR-${{ github.event.pull_request.number }}" >> "$GITHUB_OUTPUT"

      # Tests inside the container might be implemented later
      #- name: Run Unit Tests Inside Container
      #  run: docker run --rm my-app:${{ github.sha }} mvn test

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_NAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
        #Here the image is being build for the seccond time for learning purposes
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: apartment_hunt/Dockerfile
          push: true
          build-args: |
            VERSION=${{ env.new_version }}
          tags: |
            obraunnn/apt_hunt:${{ steps.version.outputs.new_version }}
            obraunnn/apt_hunt:latest
